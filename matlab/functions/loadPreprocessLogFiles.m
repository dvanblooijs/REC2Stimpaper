function dataBase = loadPreprocessLogFiles(myDataPath, dataBase)
% author: Dorien van Blooijs
% date: June 2023

% this function loads log files of all visits in a specific time period.
% These logfiles are generated by Medtronic in the Activa PC+S and contains
% information about:
% - when a patient marker is logged,
% - when an event is detected

% INPUT:
% - myDataPath: struct, containing the fields:
%   - dataPath: string with repository with the data in BIDS
%   - derivPath: string, with repository to save derivatives
%   - Figures: string with repository to save figures
% - cfg: struct containing the fields:
%   - sub_label: string with subject label
%   - ses_label: string with ses label
%   - period_start: datetime with start date of period to analyze
%   - period_stop: datetime with stop date of period to analyze

% OUTPUT:
% - dataBase: struct, containing the fields:
%   - sub_label: string with subject label
%   - ses_label: string with ses label
%   - visit: struct containing the fields:
%       - visitname: string with repository name of this visit
%       - visitdate: datetime with the date of this visit
%       - visitdatestr: string of the datetime of this visit
%       - logfiles: struct with information of all log-files during each
%       visit
%       - log: struct with all log-files combined, containing the fields:
%           - visit: string with visitname
%           - visitdate: datetime of the visit date
%           - visitdatestr: string of datetime of visit date
%           - logNotes: cell with all log notes
%           - log_dateswData: datetime array with dates of which events are
%           logged. This is very important to make a difference between
%           dates in which no events are logged due to full memory or dates
%           when no events were logged because there were no events.
%       - log: struct with only the patientmarkers (PP/SP)

%% load all log files of specific patient

% % pre-allocation
% dataBase = struct();
% visit = struct();
% 
% dataBase.sub_label = cfg(1).sub_label;
% dataBase.ses_label = cfg(1).ses_label;
% 
% % pathname of log-files
% sourcepathname = fullfile(myDataPath.dataPath,'sourcedata',cfg(1).sub_label,cfg(1).ses_label,'ieeg'); % log files are only available in sourcedata
% 
% % select visitfolders
% visitfolders = dir(sourcepathname);
% idxRec = contains({visitfolders(:).name},'Session');
% visitfolders = visitfolders(idxRec);

% for each visit
for nVisit = 1:size(dataBase.visit,2)

    % FIND LOG FILES
    logfolder = dir(fullfile(myDataPath.dataPath,'sourcedata',...
        dataBase.sub_label,dataBase.ses_label,'ieeg',...
        replace(dataBase.visit(nVisit).visitfolder,'rec-','Session_')));
    idxLogfile = contains({logfolder(:).name},'LOG.txt');

    if sum(idxLogfile) < 1 % if there is no logfile, for example when there is only realtime recording (during surgery)
        
        dataBase.visit(nVisit).timediffSpIns = [];

    else % if there is at least one logfile

        logfolder = logfolder(idxLogfile);
        
        % pre-allocation
        logfiles = struct();

        for nLog = 1:size(logfolder,1) % for each log-file

            filename = fullfile(logfolder(nLog).folder,logfolder(nLog).name);
            logNotes = importdata(filename);

            % find all dates with data
            dateswData = logs_findDateswData(logNotes, dataBase.visit(nVisit-1).visitdate, dataBase.visit(nVisit).visitdate);

            logfiles(nLog).name = filename;
            logfiles(nLog).logNotes = logNotes;
            logfiles(nLog).log_dateswData = dateswData;

        end % for-loop for each logfile

        dataBase.visit(nVisit).logdateswData = horzcat(logfiles(:).log_dateswData);

        %% extract all PP markers and SP markers from logNotes

        log = vertcat(logfiles.logNotes);

        % determine time difference between Activa (INS) and Sense
        % Programmer
        idx_SN = find(contains(log,'INS Serial Number','IgnoreCase',true));
        idx_INStime = find(contains(log,'INS timestamp','IgnoreCase',true));
        idx_SPtime = find(contains(log,'SP timestamp','IgnoreCase',true));
        
        INStime = extractAfter(log{idx_INStime(1)},': ');
        SPtime = extractAfter(log{idx_SPtime(1)},': ');
        timediffSpIns = datetime(SPtime,'InputFormat','MM/dd/yyyy hh:mm:ss aa') ...
            - datetime(INStime,'InputFormat','MM/dd/yyyy hh:mm:ss aa') ;
        
        dataBase.visit(nVisit).timediffSpIns = timediffSpIns;

        log([idx_SN,idx_INStime,idx_SPtime]) = [];

        % remove all resume and suspend sensing lognotes
        idx_sensing = contains(log,{'enable sensing','resume sensing','suspend sensing','disable sensing'},'IgnoreCase',true);
        log(idx_sensing) = [];

        % combine all lognotes per visit
        logNote = struct();
        for nLog = 1:size(log,1)

            splitEvent = strsplit(log{nLog},', ');

            logNote(nLog).filenum = 999;
            logNote(nLog).filetype = 'lognote';
            logNote(nLog).date_start = datetime(splitEvent{2},'InputFormat','MM/dd/yyyy hh:mm:ss aa');
            logNote(nLog).dateConvertSP = logNote(nLog).date_start + timediffSpIns;
            logNote(nLog).dateConvertSPstr = string(logNote(nLog).dateConvertSP);
            logNote(nLog).date_stop = NaT;
            logNote(nLog).event = splitEvent{1};
            logNote(nLog).subevent = 'n/a';

        end % for-loop line in log

        % sort lognotes chronologically
        [~,I] = sort(vertcat(logNote(:).dateConvertSP),'ascend');
        dataBase.visit(nVisit).log = logNote(I);

    end % if there is a logfile or not
end % for each visit

disp('All logfiles are loaded')



%% OLD!!
% %% load all log files of specific patient
%
% % pre-allocation
% dataBase = struct();
%
% dataBase.sub_label = cfg(1).sub_label;
% dataBase.ses_label = cfg(1).ses_label;
%
% % pathname of log-files
% sourcepathname = fullfile(myDataPath.dataPath,'sourcedata',cfg(1).sub_label,cfg(1).ses_label,'ieeg'); % log files are only available in sourcedata
%
% % select visitfolders
% visitfolders = dir(sourcepathname);
% idxRec = contains({visitfolders(:).name},'Session');
% visitfolders = visitfolders(idxRec);
%
% % for each visit
% for nVisit = 1:size(visitfolders,1)
%
%     dataBase.visit(nVisit).visitname = replace(visitfolders(nVisit).name,'Session_','rec-');
%     dataBase.visit(nVisit).visitdate = datetime(visitfolders(nVisit).name(9:18),'InputFormat','uuuu_MM_dd');
% %     dataBase.visit(nVisit).visitdatestr = string(datetime(visitfolders(nVisit).name(9:18),'InputFormat','uuuu_MM_dd'));
%
%     % LOAD LOG FILE
%     logfolder = dir(fullfile(visitfolders(nVisit).folder,visitfolders(nVisit).name));
%     idxLogfile = contains({logfolder(:).name},'LOG.txt');
%
%     if sum(idxLogfile) < 1 % if there is no logfile, for example when there is only realtime recording (during surgery)
%
%         % reconstruct time of visit by calculating visitdates from
%         % txt-files and use recording of first file, but create
%         % visit 10 minutes before this file
%         idxTxt = find(contains({logfolder(:).name},'txt')==1);
%
%         % pre-allocation
%         datevisit = NaT(size(idxTxt)); visit = cell(size(idxTxt));
%
%         for nTxt = 1:size(idxTxt,2)
%
%             digitfile = regexp(logfolder(idxTxt(nTxt)).name,'[0-9 _]');
%             visit{nTxt} = logfolder(idxTxt(nTxt)).name(7:digitfile(end-2));
%             datevisit(nTxt) = datetime(visit{nTxt},'inputformat','yyyy_MM_dd_HH_mm_ss');
%         end
%
%         [datevisit,I] = sort(datevisit,'ascend');
%         visit = visit(I);
%
%         dataBase.visit(nVisit).logfiles(1).name = 'no Logfile';
%         dataBase.visit(nVisit).logfiles(1).visit = visit{1};
%         dataBase.visit(nVisit).logfiles(1).visitdate = min(datevisit) - minutes(10);
% %         dataBase.visit(nVisit).logfiles(1).visitdatestr = string(dataBase.visit(nVisit).logfiles(1).visitdate);
%         dataBase.visit(nVisit).logfiles(1).logNotes = [];
%         dataBase.visit(nVisit).logfiles(1).log_dateswData = [];
%
%     else % when there is a logfile
%
%         numLog = find(idxLogfile==1);
%
%         for nLog = 1:size(numLog,2)
%
%             filename = fullfile(logfolder(numLog(nLog)).folder,logfolder(numLog(nLog)).name);
%             logNotes = importdata(filename);
%             [~,fname,~] = fileparts(filename);
%
%             visit = extractBefore(fname(7:end),'_LOG');
%             visitdate = datetime(visit,'inputformat','yyyy_MM_dd_HH_mm_ss');
% %             visitdatestr = string(visitdate);
%
%             % find all dates with data
%             dateswData = logs_findDateswData(logNotes, dataBase.visit(nVisit-1).visitdate, visitdate);
%
%             dataBase.visit(nVisit).logfiles(nLog).name = filename;
%             dataBase.visit(nVisit).logfiles(nLog).visit = visit;
%             dataBase.visit(nVisit).logfiles(nLog).visitdate = visitdate;
% %             dataBase.visit(nVisit).logfiles(nLog).visitdatestr = visitdatestr;
%             dataBase.visit(nVisit).logfiles(nLog).logNotes = logNotes;
%             dataBase.visit(nVisit).logfiles(nLog).log_dateswData = dateswData;
%
%         end % for-loop for each logfile
%     end % if there is a logfile or not
%
%     dataBase.visit(nVisit).log(1).visit = dataBase.visit(nVisit).logfiles(1).visit;
%     dataBase.visit(nVisit).log(1).visitdate = min([dataBase.visit(nVisit).logfiles(:).visitdate]);
% %     dataBase.visit(nVisit).log(1).visitdatestr = string(dataBase.visit(nVisit).logfiles(1).visitdate);
%     dataBase.visit(nVisit).log(1).logNotes = vertcat(dataBase.visit(nVisit).logfiles(:).logNotes);
%     dataBase.visit(nVisit).log(1).log_dateswData = unique(horzcat(dataBase.visit(nVisit).logfiles(:).log_dateswData));
%
% end % for-loop visits
%
% disp('All logfiles are loaded')
%
% %% extract all PP markers and SP markers from log files
%
% for nVisit = 1:size(dataBase.visit,2)
%
%     log = dataBase.visit(nVisit).log.logNotes;
%
%     if ~isempty(log)
%         % find patient markers
%         idxPP = contains(log,{'PP Marker','SP Marker'});
%
%         % determine time difference between Activa (INS) and Sense
%         % Programmer
%         idx_INStime = find(contains(log,'INS timestamp','IgnoreCase',true),1);
%         idx_SPtime = find(contains(log,'SP timestamp','IgnoreCase',true),1);
%         INStime = extractAfter(log{idx_INStime},': ');
%         SPtime = extractAfter(log{idx_SPtime},': ');
%         timediffSpIns = datetime(SPtime,'InputFormat','MM/dd/yyyy hh:mm:ss aa') ...
%             - datetime(INStime,'InputFormat','MM/dd/yyyy hh:mm:ss aa') ;
%
%         dataBase.visit(nVisit).log.timediffSpIns = timediffSpIns;
%
%         logP = log(idxPP);
%
%         for nLog = 1:size(logP,1)
%
%             splitEvent = strsplit(logP{nLog},', ');
%
%             dataBase.visit(nVisit).logP(nLog).filenum = 999;
%             dataBase.visit(nVisit).logP(nLog).filetype = 'lognote';
%             dataBase.visit(nVisit).logP(nLog).date_start = datetime(splitEvent{2},'InputFormat','MM/dd/yyyy hh:mm:ss aa');
% %             dataBase.visit(nVisit).logP(nLog).date_startstr = string(dataBase.visit(nVisit).logP(nLog).date_start);
%             dataBase.visit(nVisit).logP(nLog).dateConvertSP = dataBase.visit(nVisit).logP(nLog).date_start + timediffSpIns;
% %             dataBase.visit(nVisit).logP(nLog).dateConvertSPstr = string(dataBase.visit(nVisit).logP(nLog).dateConvertSP);
%             dataBase.visit(nVisit).logP(nLog).date_stop = NaT;
% %             dataBase.visit(nVisit).logP(nLog).date_stopstr = 'NaT';
%             dataBase.visit(nVisit).logP(nLog).event = splitEvent{1};
%             dataBase.visit(nVisit).logP(nLog).subevent = 'n/a';
%
%         end % for-loop line in log
%     else % if logNotes is empty
%         dataBase.visit(nVisit).log.timediffSpIns = [];
%
%     end % if not empty log
% end % for-loop visit
%
% end

